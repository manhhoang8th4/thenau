@using BookStoreOnline.Models;
@model List<CartItem>
@{
    ViewBag.Title = "GetCartInfo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var price = System.Globalization.CultureInfo.GetCultureInfo("vi-VN");
    var user = Session["TaiKhoan"] as BookStoreOnline.Models.KHACHHANG;
}

<div class="container body-page">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Sản phẩm</th>
                <th scope="col">Số lượng</th>
                <th scope="col">Đơn giá</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="prod-list-table">
                    <td class="prod-list-details" style="padding-top: 10px;">
                        <img src="@item.ImagePro" alt="">
                        <h5>@item.NamePro</h5>
                    </td>
                    <td>
                        <div style="border: 0; background-color: #f9f5ee" class="quantity-wrapper">
                            <button style=" background-color: #000; color: #f8f9fa;" type="button" class="quantity-btn" data-action="decrease">-</button>
                            <input style=" width: 100px;" type="number" name="Quantity" value="@item.Number" min="1" data-product-id="@item.ProductID" class="quantity-input">
                            <button style=" background-color: #000; color: #f8f9fa;" type="button" class="quantity-btn" data-action="increase">+</button>
                            <input style=" background-color: #000; color: #f8f9fa;" type="hidden" name="ProductID" value="@item.ProductID" />
                        </div>
                    </td>
                    <td>
                        <h5 class="price-cell" data-price="@item.FinalPrice()">@String.Format(price, "{0:c0}", item.FinalPrice())</h5>
                        <input type="hidden" name="ProductID" value="@item.ProductID" />
                    </td>
                    <td>
                        <a href="@Url.Action("Remove", "Cart", new { id = item.ProductID })" class="delete-prod-btn"><i class="bi bi-x-square-fill"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <hr />

    @using (Html.BeginForm("InsertOrder", "Cart", FormMethod.Post, new { @class = "checkout-form" }))
    {
        <div class="row infor-order">
            <div style="margin-top: -20px;" class="col-lg-6">
                <h5 style="color:#000;" class="address-title">Địa chỉ</h5>
                <textarea style="border:1px solid #ccc;" name="address" placeholder="Nhập địa chỉ giao hàng" rows="4" required></textarea>
                <h5 style="color:#000;" class="payment-method-title">Phương thức thanh toán</h5>
                <select id="paymentMethod1" name="paymentMethod1" class="form-control">
                    <option value="">Chọn phương thức thanh toán </option>
                    <option value="cod">Thanh toán bằng MoMo</option>
                    <option value="paypal">Thanh toán bằng PayPal</option>
                    <option value="momo">Thanh toán khi nhận hàng (COD)</option>
                </select>
            </div>

            <div class="col-lg-6">
                <h5 class="discount-code-title">Mã khuyến mãi</h5>
                <input style="color: #000; padding: 10px 5px; border-radius: 5px; background-color: white; border: 1px solid #ccc;"
                       type="text" name="discountCode" placeholder="Nhập mã khuyến mãi" />

                <div class="discount-details">
                    <h5>Giảm giá</h5>
                    <p id="discount-amount">0 đ</p>
                </div>

                <table class="table">
                    <tr>
                        <td>Tổng số lượng sản phẩm</td>
                        <td id="total-quantity">@ViewBag.TotalNumber</td>
                    </tr>

                    <tr>
                        <td>Tổng giá</td>
                        <td><h4 id="total-price">@String.Format(price, "{0:c0}", ViewBag.TotalPrice)</h4></td>
                    </tr>
                </table>

                <div class="payment-buttons">
                    <div>
                        <button id="codButton" class="custom-btn">Thanh toán bằng MoMo</button>
                    </div>
                    <div id="paypalButton">
                        <button type="submit" name="paymentMethod1" value="paypal" class="custom-btn">Thanh toán bằng PayPal</button>
                    </div>
                    <div id="momoButton">
                        <button type="submit" name="paymentMethod1" value="momo" class="custom-btn">Thanh toán khi nhận hàng</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<script>
 document.addEventListener("DOMContentLoaded", function () {
    var priceFormat = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' });

    var quantityInputs = document.querySelectorAll('.quantity-input');
    var priceCells = document.querySelectorAll('.price-cell');
    var totalPriceElement = document.getElementById('total-price');
    var totalQuantityElement = document.getElementById('total-quantity');
    var discountInput = document.querySelector('input[name="discountCode"]');
    var discountDetails = document.getElementById('discount-amount');
    var paymentMethodSelect = document.getElementById("paymentMethod1");
    var codButton = document.getElementById("codButton");
    var paypalButton = document.getElementById("paypalButton");
     var momoButton = document.getElementById("momoButton");

    // Add event listeners for quantity increase and decrease buttons
    quantityInputs.forEach(function (input) {
        var wrapper = input.closest('.quantity-wrapper');
        var increaseBtn = wrapper.querySelector('.quantity-btn[data-action="increase"]');
        var decreaseBtn = wrapper.querySelector('.quantity-btn[data-action="decrease"]');

        increaseBtn.addEventListener('click', function () {
            var currentValue = parseInt(input.value);
            updateQuantity(input, currentValue + 1);
        });

        decreaseBtn.addEventListener('click', function () {
            var currentValue = parseInt(input.value);
            if (currentValue > 1) {
                updateQuantity(input, currentValue - 1);
            }
        });

        input.addEventListener('input', function () {
            var newValue = parseInt(input.value);
            updateQuantity(input, newValue);
        });
    });

    function updateQuantity(input, newQuantity) {
        var productId = input.dataset.productId;
        var priceCell = input.closest('tr').querySelector('.price-cell');
        var originalPrice = parseFloat(priceCell.dataset.price);

        // Fetch backend to update the cart with the new quantity
        fetch('@Url.Action("Update", "Cart")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `productId=${productId}&quantity=${newQuantity}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                var newPrice = originalPrice * newQuantity;
                priceCell.textContent = priceFormat.format(newPrice);
                input.value = newQuantity; // Update input field with new quantity
                updateTotalPriceAndQuantity();
            } else {
                alert(data.message);
                input.value = data.validQuantity; // Revert to valid quantity
                updateQuantity(input, data.validQuantity); // Update with valid quantity
            }
        })
        .catch(error => {
            console.error('Có lỗi xảy ra:', error);
            alert('Có lỗi xảy ra khi cập nhật số lượng!');
        });
    }

    function updateTotalPriceAndQuantity() {
        var totalPrice = 0;
        var totalQuantity = 0;

        priceCells.forEach(function (cell) {
            var quantityInput = cell.closest('tr').querySelector('.quantity-input');
            var quantity = parseInt(quantityInput.value);
            totalPrice += parseFloat(cell.dataset.price) * quantity;
            totalQuantity += quantity;
        });

        // Check if there is a discount
        var discountAmount = parseFloat(discountDetails.textContent.replace(' đ', '').trim()) || 0;
        totalPrice -= discountAmount; // Subtract discount

        // Ensure total price is not negative
        if (totalPrice < 0) {
            totalPrice = 0;
        }

        totalPriceElement.textContent = priceFormat.format(totalPrice);
        totalQuantityElement.textContent = totalQuantity;
    }

    // Handle discount code blur event
    discountInput.addEventListener('blur', function () {
        var discountCode = discountInput.value;

        fetch('@Url.Action("ApplyDiscount", "Cart")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `discountCode=${discountCode}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update discount display
                discountDetails.textContent = `${data.discountAmount} đ`;

                // Update total price after discount
                var currentTotalPrice = parseFloat(totalPriceElement.textContent.replace(/[^\d.-]/g, '')) - data.discountAmount;
                totalPriceElement.textContent = priceFormat.format(currentTotalPrice);

                // Recalculate total price and quantity
                updateTotalPriceAndQuantity();
            } else {
                // Handle invalid discount code
                alert(data.message);
                discountDetails.textContent = '0 đ'; // Reset discount display
                updateTotalPriceAndQuantity(); // Recalculate total without discount
            }
        })
        .catch(error => {
            console.error('Có lỗi xảy ra khi áp dụng mã giảm giá:', error);
        });
    });

    // Handle payment method change event
     paymentMethodSelect.addEventListener("change", function () {
         var paymentMethod = paymentMethodSelect.value;

         // Reset all buttons
         codButton.style.display = "none";
         paypalButton.style.display = "none";
         momoButton.style.display = "none";

         // Show the relevant button based on the selected payment method
         if (paymentMethod === "cod") {
             codButton.style.display = "block";
         } else if (paymentMethod === "paypal") {
             paypalButton.style.display = "block";
         } else if (paymentMethod === "momo") {
             momoButton.style.display = "block";
         }
     });

    // Ensure payment method button visibility is correct on page load
    paymentMethodSelect.dispatchEvent(new Event("change"));
});
</script>

<style>
    .quantity-wrapper {
        display: flex;
        align-items: center;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f8f8f8;
    }

    .quantity-btn {
        background-color: #007bff;
        border: none;
        color: white;
        font-size: 20px;
        width: 40px;
        height: 40px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .quantity-btn:hover {
            background-color: #0056b3;
        }

        .quantity-btn.minus {
            border-radius: 5px 0 0 5px; /* Rounded corners on the left */
        }

        .quantity-btn.plus {
            border-radius: 0 5px 5px 0; /* Rounded corners on the right */
        }

    .quantity-input {
        width: 60px;
        text-align: center;
        border: none;
        font-size: 16px;
        padding: 10px;
        background-color: #fff;
        border-left: 1px solid #ddd;
        border-right: 1px solid #ddd;
        border-radius: 0;
    }

        .quantity-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.5);
        }

    .price-cell {
        font-size: 18px;
        font-weight: bold;
        color: #dc3545; /* Thay đổi màu sắc để nổi bật */
    }

    .delete-prod-btn {
        color: #dc3545;
        font-size: 20px;
        transition: color 0.3s ease;
    }

        .delete-prod-btn:hover {
            color: #c82333;
        }

    .checkout-form {
        margin-top: 20px;
        border: 1px solid #ddd;
        padding: 20px;
        border-radius: 5px;
        background-color: #f8f8f8;
    }

    .address-title, .payment-method-title, .promo-code-title {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .address-title {
        color: #007bff;
    }

    .payment-method-title {
        color: #28a745;
    }

    .promo-code {
        margin-top: 15px;
    }

        .promo-code input {
            width: calc(100% - 110px);
            margin-right: 10px;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 5px;
        }

        .promo-code button {
            width: 100px;
            border: 1px solid #007bff;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .promo-code button:hover {
                background-color: #0056b3;
            }

    #promoMessage {
        margin-top: 10px;
        font-size: 14px;
        color: #dc3545;
    }

    .custom-btn.btn-14 {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .custom-btn.btn-14:hover {
            background-color: #0056b3;
        }
    /* Tao làm */
    .custom-btn {
        padding: 12px 20px;
        background-color: #C92127;
        color: #fff;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        border-radius: 30px; /* Bo góc nhẹ */
        border: 1px solid #C92127; /* Viền cùng màu */
        transition: background-color 0.3s ease, transform 0.3s ease; /* Chuyển động mượt mà */
        text-transform: uppercase; /* Chữ in hoa */
        width: 100%; /* Nút chiếm toàn bộ chiều rộng */
        max-width: 350px; /* Giới hạn chiều rộng tối đa */
        margin-left: 100px; /* Đẩy nút sang bên phải */
        margin-right: 0; /* Đảm bảo không có khoảng cách bên phải */
    }

        /* Hiệu ứng khi hover */
        .custom-btn:hover {
            background-color: #A61C1F; /* Màu nền tối hơn khi hover */
            border-color: #A61C1F; /* Viền tối hơn khi hover */
            transform: scale(1.05); /* Phóng to nhẹ khi hover */
        }

        /* Hiệu ứng khi nhấn nút */
        .custom-btn:active {
            background-color: #93161A; /* Màu nền đậm hơn khi nhấn */
            transform: scale(1); /* Quay lại kích thước ban đầu */
        }

        /* Hiệu ứng focus */
        .custom-btn:focus {
            outline: none; /* Loại bỏ viền mặc định */
            box-shadow: 0 0 5px rgba(201, 33, 39, 0.6); /* Thêm viền sáng khi focus */
        }

    .discount-code-title {
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
        font-size: 18px; /* Tăng cỡ chữ để dễ đọc hơn */
    }

    input[name="discountCode"] {
        color: #000;
        padding: 10px 10px; /* Thêm khoảng cách hai bên */
        border-radius: 5px;
        background-color: #f7f7f7; /* Màu nền sáng để nổi bật */
        border: 1px solid #ccc;
        width: 100%; /* Để input chiếm toàn bộ chiều rộng */
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1); /* Hiệu ứng chìm */
        transition: all 0.3s ease; /* Chuyển động mượt */
    }

        input[name="discountCode"]:focus {
            border-color: #C92127; /* Đổi màu viền khi focus */
            outline: none;
            box-shadow: 0 0 5px rgba(201, 33, 39, 0.5); /* Hiệu ứng viền sáng */
        }

    .discount-details {
        margin-top: 15px;
        padding: 12px 15px;
        border: 1px solid #ccc;
        border-radius: 8px; /* Bo góc nhẹ */
        display: flex;
        justify-content: space-between; /* Canh đều nội dung */
        background-color: #f9f9f9; /* Màu nền sáng */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Hiệu ứng đổ bóng */
    }

        .discount-details h5 {
            margin: 0;
            font-size: 16px; /* Cỡ chữ nhỏ hơn cho phù hợp */
            color: #333;
        }

    #discount-amount {
        font-size: 16px;
        font-weight: bold;
        color: #C92127; /* Màu chữ nổi bật */
    }

    /* Tao làm */
</style>
